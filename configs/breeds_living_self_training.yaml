train_datasets:
    source:
        classname: datasets.breeds.Breeds
        args:
            source: True
            target: False
            split: 'train'
            breeds_name: 'living17'
            root: '/u/scr/nlp/imagenet/'
        transforms:
            - classname: torchvision.transforms.RandomResizedCrop
              args:
                  size: 224
            - classname: torchvision.transforms.RandomHorizontalFlip
            - classname: torchvision.transforms.ToTensor
            - classname: torchvision.transforms.Normalize
              args:
                  mean: &norm_mean [0.485, 0.456, 0.406]
                  std: &norm_std [0.229, 0.224, 0.225]
    target:
        classname: datasets.breeds.Breeds
        args:
            source: False
            target: True
            split: 'train'
            breeds_name: 'living17'
            root: '/u/scr/nlp/imagenet/'
        transforms:
            - classname: torchvision.transforms.RandomResizedCrop
              args:
                  size: 224
            - classname: torchvision.transforms.RandomHorizontalFlip
            - classname: torchvision.transforms.ToTensor
            - classname: torchvision.transforms.Normalize
              args:
                  mean: *norm_mean
                  std: *norm_std
test_datasets:
    - name: 'source_val_living'
      max_test_examples: 1000
      classname: datasets.breeds.Breeds
      args:
          source: True
          split: 'val'
          breeds_name: 'living17'
          root: '/u/scr/nlp/imagenet/'
    - name: 'target_val_living'
      max_test_examples: 1000
      classname: datasets.breeds.Breeds
      args:
          source: False
          target: True
          split: 'val'
          breeds_name: 'living17'
          root: '/u/scr/nlp/imagenet/'
default_test_transforms:
    - classname: torchvision.transforms.Resize
      args:
          size: 256
    - classname: torchvision.transforms.CenterCrop
      args:
          size: 224
    - classname: torchvision.transforms.ToTensor
    - classname: torchvision.transforms.Normalize
      args:
          mean: *norm_mean
          std: *norm_std
          
log_interval: 5000
use_cuda: True
save_freq: 10
epochs: &epochs 2
batch_size: 64
num_workers: 2
save_all_checkpoints: False

num_classes: 17

finetune: True
linear_probe: False
use_net_val_mode: False

optimizer:
  classname: torch.optim.SGD
  args:
    lr: &lr 0.01
    momentum: 0.9
    weight_decay: 0.0001

scheduler:
  classname: torch.optim.lr_scheduler.MultiStepLR
  args:
    milestones: [30, 50]

model:
  classname: models.imnet_resnet.ResNet50
  args:
    pretrained: False

criterion:
  classname: torch.nn.CrossEntropyLoss
  args:
    reduction: mean

