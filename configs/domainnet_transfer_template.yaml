# all transforms are imagenet, taken from
# https://github.com/pytorch/examples/blob/master/imagenet/main.py

train_dataset:
    classname: &domainnet_class datasets.domainnet.DomainNet
    args:
        domain: &id_domain 'ID_DOMAIN_REPLACE'
        split: 'train'
        root: &domainnet_root '/scr/biggest/domainnet'
        verbose: True
        version: &domainnet_version 'DOMAINNET_VERSION_REPLACE'
    transforms:
        - classname: torchvision.transforms.RandomResizedCrop
          args:
              size: 224
        - classname: torchvision.transforms.RandomHorizontalFlip
        - classname: torchvision.transforms.ToTensor
        - classname: torchvision.transforms.Normalize
          args:
              mean: &norm_mean [0.485, 0.456, 0.406]
              std: &norm_std [0.229, 0.224, 0.225]

default_test_transforms:
    - classname: torchvision.transforms.Resize
      args:
          size: 256
    - classname: torchvision.transforms.CenterCrop
      args:
          size: 224
    - classname: torchvision.transforms.ToTensor
    - classname: torchvision.transforms.Normalize
      args:
          mean: *norm_mean
          std: *norm_std

test_datasets:
    - name: 'id_test'
      max_test_examples: 5000
      classname: *domainnet_class
      args:
          domain: *id_domain
          split: 'test'
          root: *domainnet_root
          version: *domainnet_version
# ADD OOD HERE

early_stop_dataset_names:
  - 'id_test'

log_interval: 5000
use_cuda: True
save_freq: 50
epochs: &epochs 150
batch_size: 128
num_workers: 2
save_all_checkpoints: False

num_classes: 345

finetune: True
linear_probe: False
use_net_val_mode: False

optimizer:
  classname: torch.optim.SGD
  args:
    lr: &lr 0.1
    momentum: 0.9
    weight_decay: 0.0001

scheduler:
  classname: torch.optim.lr_scheduler.MultiStepLR
  args:
    milestones: [60, 120]

model:
  classname: models.imnet_resnet.ResNet50
  args:
    pretrained: False

criterion:
  classname: torch.nn.CrossEntropyLoss

